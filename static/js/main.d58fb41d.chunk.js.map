{"version":3,"sources":["shaders/simulationMaterial.js","shaders/dofPointsMaterial.js","Particles.js","App.js","index.js"],"names":["getPoint","v","size","data","offset","set","Math","random","length","normalize","multiplyScalar","toArray","getSphere","count","p","THREE","Float32Array","i","SimulationMaterial","vertexShader","fragmentShader","uniforms","positions","value","uTime","uCurlFreq","extend","DofPointsMaterial","uFocus","uFov","uBlur","transparent","blending","depthWrite","Particles","speed","fov","aperture","focus","curl","props","simRef","useRef","renderRef","useState","scene","pow","camera","uvs","target","useFBO","minFilter","magFilter","format","type","particles","useMemo","i3","useFrame","state","gl","setRenderTarget","clear","render","current","texture","clock","elapsedTime","lerp","createPortal","ref","attachObject","array","itemSize","App","useControls","min","max","step","OrbitControls","makeDefault","autoRotate","autoRotateSpeed","zoomSpeed","CameraShake","yawFrequency","maxYaw","pitchFrequency","maxPitch","rollFrequency","maxRoll","intensity","window","addEventListener","document","querySelector","events","linear","position","canvas","antialias","alpha","dispatchEvent","Event"],"mappings":"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","file":"static/js/main.d58fb41d.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\nimport glsl from 'babel-plugin-glsl/macro'\n\nfunction getPoint(v, size, data, offset) {\n  v.set(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1)\n  if (v.length() > 1) return getPoint(v, size, data, offset)\n  return v.normalize().multiplyScalar(size).toArray(data, offset)\n}\n\nfunction getSphere(count, size, p = new THREE.Vector3()) {\n  const data = new Float32Array(count * 3)\n  for (let i = 0; i < count * 3; i += 3) getPoint(p, size, data, i)\n  return data\n}\n\nclass SimulationMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }`,\n      fragmentShader: glsl`uniform sampler2D positions;\n      uniform float uTime;\n      uniform float uCurlFreq;\n      varying vec2 vUv;\n      #pragma glslify: curl = require(glsl-curl-noise2)\n      #pragma glslify: noise = require(glsl-noise/classic/3d.glsl)      \n      void main() {\n        float t = uTime * 0.015;\n        vec3 pos = texture2D(positions, vUv).rgb; // basic simulation: displays the particles in place.\n        vec3 curlPos = texture2D(positions, vUv).rgb;\n        pos = curl(pos * uCurlFreq + t);\n        curlPos = curl(curlPos * uCurlFreq + t);\n        curlPos += curl(curlPos * uCurlFreq * 2.0) * 0.5;\n        curlPos += curl(curlPos * uCurlFreq * 4.0) * 0.25;\n        curlPos += curl(curlPos * uCurlFreq * 8.0) * 0.125;\n        curlPos += curl(pos * uCurlFreq * 16.0) * 0.0625;\n        gl_FragColor = vec4(mix(pos, curlPos, noise(pos + t)), 1.0);\n      }`,\n      uniforms: {\n        positions: { value: new THREE.DataTexture(getSphere(512 * 512, 128), 512, 512, THREE.RGBFormat, THREE.FloatType) },\n        uTime: { value: 0 },\n        uCurlFreq: { value: 0.25 }\n      }\n    })\n  }\n}\n\nextend({ SimulationMaterial })\n","import * as THREE from 'three'\nimport { extend } from '@react-three/fiber'\n\nclass DofPointsMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform sampler2D positions;\n      uniform float uTime;\n      uniform float uFocus;\n      uniform float uFov;\n      uniform float uBlur;\n      varying float vDistance;\n      void main() { \n        vec3 pos = texture2D(positions, position.xy).xyz;\n        vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n        gl_Position = projectionMatrix * mvPosition;\n        vDistance = abs(uFocus - -mvPosition.z);\n        gl_PointSize = (step(1.0 - (1.0 / uFov), position.x)) * vDistance * uBlur;\n      }`,\n      fragmentShader: `uniform float uOpacity;\n      varying float vDistance;\n      void main() {\n        vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n        if (dot(cxy, cxy) > 1.0) discard;\n        gl_FragColor = vec4(vec3(1.0), (1.04 - clamp(vDistance * 1.5, 0.0, 1.0)));\n      }`,\n      uniforms: {\n        positions: { value: null },\n        uTime: { value: 0 },\n        uFocus: { value: 5.1 },\n        uFov: { value: 50 },\n        uBlur: { value: 30 }\n      },\n      transparent: true,\n      blending: THREE.NormalBlending,\n      depthWrite: false\n    })\n  }\n}\n\nextend({ DofPointsMaterial })\n","import * as THREE from 'three'\nimport { useMemo, useState, useRef } from 'react'\nimport { createPortal, useFrame } from '@react-three/fiber'\nimport { useFBO } from '@react-three/drei'\nimport './shaders/simulationMaterial'\nimport './shaders/dofPointsMaterial'\n\nexport function Particles({ speed, fov, aperture, focus, curl, size = 512, ...props }) {\n  const simRef = useRef()\n  const renderRef = useRef()\n  // Set up FBO\n  const [scene] = useState(() => new THREE.Scene())\n  const [camera] = useState(() => new THREE.OrthographicCamera(-1, 1, 1, -1, 1 / Math.pow(2, 53), 1))\n  const [positions] = useState(() => new Float32Array([-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0]))\n  const [uvs] = useState(() => new Float32Array([0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0]))\n  const target = useFBO(size, size, { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBFormat, type: THREE.FloatType })\n  // Normalize points\n  const particles = useMemo(() => {\n    const length = size * size\n    const particles = new Float32Array(length * 3)\n    for (let i = 0; i < length; i++) {\n      let i3 = i * 3\n      particles[i3 + 0] = (i % size) / size\n      particles[i3 + 1] = i / size / size\n    }\n    return particles\n  }, [size])\n  // Update FBO and pointcloud every frame\n  useFrame((state) => {\n    state.gl.setRenderTarget(target)\n    state.gl.clear()\n    state.gl.render(scene, camera)\n    state.gl.setRenderTarget(null)\n    renderRef.current.uniforms.positions.value = target.texture\n    renderRef.current.uniforms.uTime.value = state.clock.elapsedTime\n    renderRef.current.uniforms.uFocus.value = THREE.MathUtils.lerp(renderRef.current.uniforms.uFocus.value, focus, 0.1)\n    renderRef.current.uniforms.uFov.value = THREE.MathUtils.lerp(renderRef.current.uniforms.uFov.value, fov, 0.1)\n    renderRef.current.uniforms.uBlur.value = THREE.MathUtils.lerp(renderRef.current.uniforms.uBlur.value, (5.6 - aperture) * 9, 0.1)\n    simRef.current.uniforms.uTime.value = state.clock.elapsedTime * speed\n    simRef.current.uniforms.uCurlFreq.value = THREE.MathUtils.lerp(simRef.current.uniforms.uCurlFreq.value, curl, 0.1)\n  })\n  return (\n    <>\n      {/* Simulation goes into a FBO/Off-buffer */}\n      {createPortal(\n        <mesh>\n          <simulationMaterial ref={simRef} />\n          <bufferGeometry>\n            <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n            <bufferAttribute attachObject={['attributes', 'uv']} count={uvs.length / 2} array={uvs} itemSize={2} />\n          </bufferGeometry>\n        </mesh>,\n        scene\n      )}\n      {/* The result of which is forwarded into a pointcloud via data-texture */}\n      <points {...props}>\n        <dofPointsMaterial ref={renderRef} />\n        <bufferGeometry>\n          <bufferAttribute attachObject={['attributes', 'position']} count={particles.length / 3} array={particles} itemSize={3} />\n        </bufferGeometry>\n      </points>\n    </>\n  )\n}\n","import { OrbitControls, CameraShake } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport { Particles } from './Particles'\n\nexport default function App() {\n  const props = useControls({\n    focus: { value: 5.1, min: 3, max: 7, step: 0.01 },\n    speed: { value: 0.1, min: 0.1, max: 100, step: 0.1 },\n    aperture: { value: 1.8, min: 1, max: 5.6, step: 0.1 },\n    fov: { value: 60, min: 0, max: 200 },\n    curl: { value: 0.25, min: 0.01, max: 0.5, step: 0.01 }\n  })\n  return (\n    <>\n      <OrbitControls makeDefault autoRotate autoRotateSpeed={0.5} zoomSpeed={0.1} />\n      <CameraShake yawFrequency={1} maxYaw={0.05} pitchFrequency={1} maxPitch={0.05} rollFrequency={0.5} maxRoll={0.5} intensity={0.2} />\n      <Particles {...props} />\n    </>\n  )\n}\n","import * as THREE from 'three'\nimport { render, events } from '@react-three/fiber'\nimport './styles.css'\nimport App from './App'\n\nwindow.addEventListener('resize', () =>\n  render(<App />, document.querySelector('canvas'), {\n    events,\n    linear: true,\n    camera: { fov: 25, position: [0, 0, 6] },\n    // https://barradeau.com/blog/?p=621\n    // This examples needs WebGL1 (?)\n    gl: new THREE.WebGL1Renderer({\n      canvas: document.querySelector('canvas'),\n      antialias: true,\n      alpha: true\n    })\n  })\n)\n\nwindow.dispatchEvent(new Event('resize'))\n"],"sourceRoot":""}